package subgit.controller;

import java.io.IOException;
import java.security.Principal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.tmatesoft.svn.core.SVNLogEntry;
import org.tmatesoft.svn.core.SVNLogEntryPath;

import subgit.dto.Leader;
import subgit.dto.Person;
import subgit.dto.Team;
import subgit.mapper.LeaderMapper;
import subgit.mapper.TeamMapper;
import subgit.mapper.UserMapper;
import subgit.service.MyAuthenticationProvider;
import subgit.service.UserService;
import subgit.util.GitUtil;

import subgit.util.SvnUtil;

@Controller
public class GitController {
	
	@Autowired
	TeamMapper teamMapper;
	
	@Autowired
	LeaderMapper leaderMapper;
	
	@Autowired
	UserMapper userMapper;
	
	@RequestMapping("/")
	public String index(Model model){
		model.addAttribute("teamList", teamMapper.selectAll());
		return "index";
	}
	
	@RequestMapping("/about")
	public String about(Model model){
		model.addAttribute("userList", userMapper.selectAll());
		model.addAttribute("teamList", teamMapper.selectAll());
		model.addAttribute("leaderList",leaderMapper.selectAll());
		
		return "homepage/about";
	}
	
	@RequestMapping(value="/signup" , method=RequestMethod.GET)
	public String signup(Model model){
		
		return "homepage/selectSignUp";
	}
	
	@RequestMapping(value="/git/signup" , method=RequestMethod.GET)
	public String gitSignup(Model model){
		
		return "homepage/signup";
	}
	
	@RequestMapping(value="/svn/signup" , method=RequestMethod.GET)
	public String svnSignup(Model model){
		
		return "homepage/svnSignUp";
	}
	
	@RequestMapping(value="/git/signup" , method=RequestMethod.POST)
	public String signup(Model model,Leader leader,@RequestParam("password") String password, Team team, Person person){
		leaderMapper.insert(leader);
		team.setLeaderNum_fk((leader.getIdx()));
		team.setPassword(MyAuthenticationProvider.encryptPasswd(password));
		teamMapper.insert(team);
		
		if((person.getStNum()!=null)){
			userMapper.insert(UserService.getPersonList(person, team));
		}
		
		return "redirect:/about";
	}
	
	@RequestMapping(value="/signup" , method=RequestMethod.POST)
	public String svnSignup(Model model,Leader leader,@RequestParam("password") String password, Team team, Person person){
		leaderMapper.insert(leader);
		team.setLeaderNum_fk((leader.getIdx()));
		team.setPassword(MyAuthenticationProvider.encryptPasswd(password));
		teamMapper.insert(team);
		
		if((person.getStNum()!=null)){
			userMapper.insert(UserService.getPersonList(person, team));
		}
		
		return "redirect:/about";
	}
	
	
	//내 팀페이지
		@RequestMapping(value = "/myTeam", method = RequestMethod.GET)
		public String myPage(Model model,Principal principal){
			
			//leader테이블의 idx
			int idx = leaderMapper.selectByLoginId(principal.getName()).getIdx();
			List<Person> list = userMapper.selectByLoginId(idx);
			String url = teamMapper.selectByLoginId(principal.getName()).getGitURL();
			int leaderNum_fk = teamMapper.selectByLoginId(principal.getName()).getLeaderNum_fk();

			/*
			SvnUtil svn = new SvnUtil();
			svn.init(url, principal.getName(), "wldnr335");

			HashMap<String, Integer> hs = new HashMap<String, Integer>();

			for(int i=0;i<list.size();i++){
				hs.put(list.get(i).getStNum(), svn.printPerLastRevision(list.get(i).getStNum()));
			}
			hs.put(principal.getName(), svn.printPerLastRevision(principal.getName()));//리더는 따로 맨 뒤에 넣어준다.

			Person leader = new Person();
			leader.setSt_gitName(leaderMapper.selectByLoginId(principal.getName()).getGitName());
			leader.setStNum(principal.getName());
			list.add(leader);

			model.addAttribute("count", svn.printAllCommitCount());
			model.addAttribute("p_count",hs);
			model.addAttribute("p_list", list);
			model.addAttribute("size", list.size());
			*/
			
			return	"redirect:svn/teampage/teamEnter?gitURL="+url+"&leaderNum_fk="+leaderNum_fk;
		}
		
		
	@RequestMapping("/login")
	public String login(){
		
		return "homepage/login";
	}
	
	@RequestMapping("/help")
	public String help(){
		
		return "homepage/help";
	}
	
	

	//프로젝트 명으로 zip파일을 받을 수 있다.
		@RequestMapping(value = "/{creatorName}/{projectName}.zip", method = RequestMethod.GET)
		public void getZipFile(@PathVariable("creatorName") String creatorName,
				@PathVariable("projectName") String projectName,
				HttpServletResponse response) throws IOException{

			GitUtil gitUtil = new GitUtil();
			gitUtil.getProjectZip(creatorName,projectName,response);
		}
}