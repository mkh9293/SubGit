package subgit.controller;

import java.io.IOException;
import java.security.Principal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.tmatesoft.svn.core.SVNLogEntry;
import org.tmatesoft.svn.core.SVNLogEntryPath;

import subgit.dto.Leader;
import subgit.dto.Person;
import subgit.dto.Team;
import subgit.mapper.LeaderMapper;
import subgit.mapper.TeamMapper;
import subgit.mapper.UserMapper;
import subgit.service.MyAuthenticationProvider;
import subgit.service.UserService;
import subgit.util.GitUtil;

import subgit.util.SvnUtil;

@Controller
public class GitController {
	
	@Autowired
	TeamMapper teamMapper;
	
	@Autowired
	LeaderMapper leaderMapper;
	
	@Autowired
	UserMapper userMapper;
	
	@RequestMapping("/")
	public String index(Model model){
		model.addAttribute("teamList", teamMapper.selectAll());
		return "index";
	}
	
	@RequestMapping("/about")
	public String about(Model model){
		model.addAttribute("userList", userMapper.selectAll());
		model.addAttribute("teamList", teamMapper.selectAll());
		model.addAttribute("leaderList",leaderMapper.selectAll());
		
		return "homepage/about";
	}
	
	@RequestMapping(value="/signup" , method=RequestMethod.GET)
	public String signup(Model model){
		
		return "homepage/selectSignUp";
	}
	
	@RequestMapping(value="/git/signup" , method=RequestMethod.GET)
	public String gitSignup(Model model){
		
		return "homepage/signup";
	}
	
	@RequestMapping(value="/svn/signup" , method=RequestMethod.GET)
	public String svnSignup(Model model){
		
		return "homepage/svnSignUp";
	}
	
	@RequestMapping(value="/git/signup" , method=RequestMethod.POST)
	public String signup(Model model,Leader leader,@RequestParam("password") String password, Team team, Person person){
		leaderMapper.insert(leader);
		team.setLeaderNum_fk((leader.getIdx()));
		team.setPassword(MyAuthenticationProvider.encryptPasswd(password));
		teamMapper.insert(team);
		
		if((person.getStNum()!=null)){
			userMapper.insert(UserService.getPersonList(person, team));
		}
		
		return "redirect:/about";
	}
	
	@RequestMapping(value="/signup" , method=RequestMethod.POST)
	public String svnSignup(Model model,Leader leader,@RequestParam("password") String password, Team team, Person person){
		leaderMapper.insert(leader);
		team.setLeaderNum_fk((leader.getIdx()));
		team.setPassword(MyAuthenticationProvider.encryptPasswd(password));
		teamMapper.insert(team);
		
		if((person.getStNum()!=null)){
			userMapper.insert(UserService.getPersonList(person, team));
		}
		
		return "redirect:/about";
	}
	
	@RequestMapping("/login")
	public String login(){
		
		return "homepage/login";
	}
	
	@RequestMapping("/help")
	public String help(){
		
		return "homepage/help";
	}
	
	//프로젝트의 내용을 볼때 사용된다
	@RequestMapping(value={"/vi/{gitName}/{dirName}", "/vi/{gitName}/{dirName}/**"}, method = RequestMethod.GET)
	public String showContent3(@PathVariable("gitName") String gitName,
			@PathVariable("dirName") String dirName,
			HttpServletRequest req,
			Model model) throws IOException{

		GitUtil gitUtil = new GitUtil();
		//여기서 팀명을 set해주면 될 것같다
		Repository res = gitUtil.openRepository();

		RevTree rev = gitUtil.getTree(res);
		
		TreeWalk treeWalk = new TreeWalk(res);
		treeWalk.addTree(rev);
		treeWalk.setRecursive(false);
	
		List<String> fileInfo = new ArrayList();

		System.out.println("url: "+req.getRequestURI());
		
		//dirName부터 뒤에 출력
		String path1 = req.getRequestURI().substring(req.getRequestURI().indexOf(dirName));
		
		String[] temp1 = path1.split("/");
		
		StringBuilder sb = new StringBuilder();
		for(int i=1;i<temp1.length;i++){
			sb.append(temp1[i]+"/");
		}
		
		int depth = temp1.length-1;
		System.out.println("depth: "+depth);
		
		fileInfo = gitUtil.showContent(fileInfo, treeWalk, sb.toString(), depth, 0);
		
		String[] list = fileInfo.toArray(new String[fileInfo.size()]);
		for(int i=0;i<list.length;i++){
			System.out.println("list: "+list[i]);
		}
		
		model.addAttribute("fileInfo",list);

		return "gitTest";
	}

	//프로젝트 명으로 zip파일을 받을 수 있다.
		@RequestMapping(value = "/{creatorName}/{projectName}.zip", method = RequestMethod.GET)
		public void getZipFile(@PathVariable("creatorName") String creatorName,
				@PathVariable("projectName") String projectName,
				HttpServletResponse response) throws IOException{

			GitUtil gitUtil = new GitUtil();
			gitUtil.getProjectZip(creatorName,projectName,response);
		}
}