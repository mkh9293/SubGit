package subgit.controller;

import java.io.IOException;
import java.security.Principal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidRemoteException;
import org.eclipse.jgit.api.errors.NoHeadException;
import org.eclipse.jgit.api.errors.TransportException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import subgit.dto.AuthorIdent;
import subgit.dto.CodeInfo;
import subgit.dto.Leader;
import subgit.dto.Person;
import subgit.dto.Team;
import subgit.mapper.LeaderMapper;
import subgit.mapper.TeamMapper;
import subgit.mapper.UserMapper;
import subgit.util.GitUtil;
import subgit.util.SvnUtil;

@Controller
@RequestMapping("/teampage")
public class TeamController {
	
	@Autowired
	LeaderMapper leaderMapper;
	@Autowired
	UserMapper userMapper;
	@Autowired
	TeamMapper teamMapper;
	
	// 스레드에 안전하게 디렉토리가 존재하는지 검사하기 위한 변수
	private static ConcurrentHashMap<Integer,Integer> exist = new ConcurrentHashMap<Integer,Integer>();
	
	@RequestMapping("/exitTeam")
	public void exitTeam(@RequestParam("fk")int fk,@RequestParam("gitURL")String url) throws IOException{
		System.out.println(fk+" fkfkfk");
		System.out.println(url+" urlurlurl");
		System.out.println(exist.get(fk)+" 현재 밸류 값");
		exist.compute(fk, (k,v) -> --v);
		System.out.println(exist.get(fk)+" 삭제 후 밸류 값");
		if(exist.get(fk)==0){
			GitUtil gitUtil = new GitUtil();
			System.out.println("remove~");
//			gitUtil.removeRepository("D:/"+gitUtil.uniCode(url));
		}
	}
	
	@RequestMapping(value="/teamEnter",method=RequestMethod.GET)
	public String teamEnter(Model model, Team team) throws InvalidRemoteException, TransportException, GitAPIException, IOException{
		GitUtil gitUtil = new GitUtil();
		int leaderNum = team.getLeaderNum_fk();
		// leaderNum을 이용해 디렉토리가 존재하는지 확인 후 있으면 값을 1씩 추가, 없으면 새로 생성 후 1로 초기화
		if(exist.containsKey(leaderNum)){
			System.out.println(exist.get(leaderNum)+" 첫");
			exist.compute(leaderNum, (k,v) -> v == null? 1:v+1);
			System.out.println(exist.get(leaderNum)+" 둘");
			String url = gitUtil.uniCode(team.getGitURL());
			gitUtil.setLocalPath("D:/"+url);
	
		}else{
			System.out.println(exist.get(leaderNum)+" 셋");
			exist.put(leaderNum,1);
			gitUtil.cloneRepository(team.getGitURL());
		}
		
		Leader leader = new Leader();
		leader = leaderMapper.selectByIdx(leaderNum);
		int idx = team.getLeaderNum_fk();
		List<Person> list = userMapper.selectByLoginId(idx);
		List<AuthorIdent> codeList = new ArrayList<AuthorIdent>();
		HashMap<String, Integer> hs = new HashMap<String, Integer>();
		
		codeList = gitUtil.lineList();
		for(int i=0;i<list.size();i++){
			hs.put(list.get(i).getStNum(),gitUtil.getCommitCount(list.get(i).getSt_gitName()));
		}
		hs.put(leader.getLeaderNum(), gitUtil.getCommitCount(leader.getGitName()));//리더는 따로 맨 뒤에 넣어준다.
		
		Person leaderPerson = new Person();
		leaderPerson.setSt_gitName(leader.getGitName());
		leaderPerson.setStNum(leader.getLeaderNum());
		list.add(leaderPerson);

		// 전체 커밋 수
		model.addAttribute("count", gitUtil.allCommitCount());
		model.addAttribute("p_count",hs);
		model.addAttribute("p_list", list);
		model.addAttribute("size", list.size());
		model.addAttribute("leaderNum_fk", idx);
		model.addAttribute("gitURL",team.getGitURL());
		model.addAttribute("leaderName", leaderPerson.getSt_gitName());
		model.addAttribute("leaderNum", leaderPerson.getStNum());
		model.addAttribute("codeListInfo", codeList);
		return "teampage/gitHome";
	}
	
	@RequestMapping(value = "/jsonGit", method = RequestMethod.GET)
	 public @ResponseBody List<Map<String,Object>> jsonresponse(Model model,Team team,Leader leaderPerson) throws NoHeadException, GitAPIException, IOException {
		int idx = team.getIdx();
		List<Person> list = userMapper.selectByLoginId(idx);
		GitUtil gitUtil = new GitUtil();
		
		String url = gitUtil.uniCode(team.getGitURL());
		gitUtil.setLocalPath("D:/"+url);
		Person leader = new Person();
		leader.setSt_gitName(leaderPerson.getGitName());
		leader.setStNum(leaderPerson.getLeaderNum());
		list.add(leader);
		
		HashMap<String, Integer> hs = new HashMap<String, Integer>();
		
		for(int i=0;i<list.size();i++){
			hs.put(list.get(i).getStNum(), gitUtil.getCommitCount(list.get(i).getSt_gitName()));
		}
		hs.put(leaderPerson.getGitName(), gitUtil.getCommitCount(leaderPerson.getGitName()));//리더는 따로 맨 뒤에 넣어준다.
		
		Map<String,Object> jsonSubObject;
		List<Map<String,Object>> jsonList = new ArrayList<Map<String,Object>>();
		
		for(int i=0;i<list.size();i++){
			jsonSubObject = new HashMap<String,Object>();
			jsonSubObject.put("label",list.get(i).getSt_gitName());
			jsonSubObject.put("value",hs.get(list.get(i).getStNum()));
			jsonList.add(i,jsonSubObject);
		}
		
		return jsonList;
	 }
	
	@RequestMapping(value="/team/gitMember",method=RequestMethod.GET)
	public String member(Model model, @RequestParam("st") String st,Team team){
		GitUtil gitUtil = new GitUtil();
		List<CodeInfo> commitList = new ArrayList<CodeInfo>();
		String url = gitUtil.uniCode(team.getGitURL());
		gitUtil.setLocalPath("D:/"+url);
		commitList = gitUtil.commitInfo(st);
		/*팀리스트 .. sidebar부분에 넣어줘야한다.*/
		
		List<Person> list = userMapper.selectByLoginId(team.getLeaderNum_fk());
		Leader leader = new Leader();
		leader = leaderMapper.selectByIdx(team.getLeaderNum_fk());
		Person leaderPerson = new Person();
		leaderPerson.setSt_gitName(leader.getGitName());
		leaderPerson.setStNum(leader.getLeaderNum());
		
		list.add(leaderPerson);
		/*/팀리스트 ..*/
		
		model.addAttribute("leaderNum_fk", team.getLeaderNum_fk());
		model.addAttribute("gitURL",team.getGitURL());
		model.addAttribute("commitList", commitList);
		model.addAttribute("p_list", list);
		model.addAttribute("author", st);
		
		return "teampage/gitMember";
	}
	
	@RequestMapping(value = "/team/gitMember.json", method = RequestMethod.GET)
	 public @ResponseBody List<Map<String,Object>> memberJson(Model model,@RequestParam ("st") String st, @RequestParam ("startDate") String startDate, @RequestParam ("endDate") String endDate,Principal principal) throws ParseException {
		int idx = leaderMapper.selectByLoginId(principal.getName()).getIdx();
		List<Person> list = userMapper.selectByLoginId(idx);
		String url = teamMapper.selectByLoginId(principal.getName()).getGitURL();
		
		SvnUtil svn = new SvnUtil();
		svn.init(url, principal.getName(), "wldnr335");
		
		Person leader = new Person();
		leader.setSt_gitName(leaderMapper.selectByLoginId(principal.getName()).getGitName());
		leader.setStNum(principal.getName());
		list.add(leader);
		
		Map<String,Object> jsonSubObject = new HashMap<String,Object>();
		List<Map<String,Object>> jsonList = new ArrayList<Map<String,Object>>();
		
		jsonList = svn.printByDate(startDate, endDate, st);
		
		return jsonList;
	 }
}
